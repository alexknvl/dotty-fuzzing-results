object i0 {
trait List[+i0[_]] {
def i0[I5, I5, I5 <: i0, I5, I5 >:: I5, I5, I5 >: I5, I5, i1, I4, I5, I5, I5, I5, I5, I5, I5, I5, I5, I5, I5, I5, I5, I5](
I5: I5,
i3: String, i3: i0,
I5:i3, I5: i0, I5: i0,
I5, I5, I5), I5, I5
<I4, I5, I5]
): (i0, I2) => I5
val i3 = I4
I5 I5
i0(i0 => i0)
(i1: I5[i0, I5]).I5(I5) I5(I4)
def I5[i0, I5, I5, I5](I5: i0) = ()
implicit def i1[I5](implicit I5: i0[I5]): i0[I5] = I5 match {
case I5[I5, I5] =>
def i1 = 1Seq(I5: Int, I5: Int))
}