trait I0[I0]
trait I6[I6]
class I6[I0, I6](val I6: I0) {
def contains(I6: I6): I0[I6] = new I0[I0]
}
class I6 {
implicit def I6(I6: I0) =
I6.I6(I6)
}
def I6(I1: I0): I6
def I2[I2](i3: Int) = ???
i4 {}
class I0
case class I6[I6](val I6: I0, i3: I6)
object I6 {
import I5.{I6 =>
val i4 = i3; I6 }
catch { case I6 => (new I6.head) }
implicit class i3(i3: Int) {
def I2[I6 >: Map](i3: i3, i4: Seq[String, String]): List[i4[_]](I1: I6[_, _])
def main(I2: Array[String]): Unit =
i3(new I6)
}